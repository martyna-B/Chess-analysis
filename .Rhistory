X <- rnorm(10000,1,2)
n <- seq(10,10000,10)
d<- numeric()
for (i in n)
{
d[(i/10)]  = 1/i * sum(abs(X[1:i] - mi))
}
length(n)
length(d)
plot(n,d)
lines(n,rep(sigma*sqrt(2/pi),times=length(n)),col='red' )
#zad3
df <-read.csv('HousePrices.csv')
df <-read.csv('HousePrices.csv')
library(cpp11)
q()
install.packages("readxl")
library(readxl)
detach("package:readxl", unload = TRUE)
library(knitr)
library(knitr)
install.packages("KNITR")
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages(”shiny”)
output$distPlot <- renderPlot({
x <- seq(-6, 6, length.out = 1000)
# dSHASHo2 to gęstość rozkładu Sinh-arcsinh
y <- dSHASHo2(x, mu = input$mu, sigma = input$sigma,
nu = input$nu, tau = input$tau)
y2 <- dnorm(x, mean=input$mu, sd=input$sigma)
plot(x, y, type=”l”, lwd=2)
lines(x, y2, lwd=2, col=”red”)
})
library(knitr)
library("boot")
x <- rnorm(40) * runif(40) + rexp(40)
samplemean <- function(x,d){mean(x[d])}
rboot <-  boot(x,samplemean,R=1000)
mean(x)
mean(rboot$t)
mean(rboot$t)-rboot$t0
sd(rboot$t)
boot.ci(rboot, conf=0.95,c("norm","basic","perc","bca"))
rboot$t
median(rnorm(4000) * runif(4000) + rexp(4000))
median(rnorm(4000) * runif(4000))
median(rexp(4000))
median(rnorm(4000) * runif(4000) + rexp(4000))
median(rnorm(40000) * runif(40000) + rexp(40000))
median(rnorm(40000) * runif(40000))
median(rexp(40000))
x <- rnorm(40000) * runif(40000)
y <- rexp(40000)
median( x+y)
median(x)
median(y)
df <-download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/ex12_normalized_intensities.csv", "ex12_normalized_intensities.csv", method="curl")
download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/ex12_normalized_intensities.csv", "ex12_normalized_intensities.csv", method="curl")
df <- read.csv('zajecia6.csv')
df <- read.csv('./zajecia6.csv')
df <- read.csv(file='./zajecia6.csv')
df <- read.csv(file="zajecia6.csv")
df <- read.csv(file="zajecia6.csv")
df <- read.csv(file="zajecia6.csv")
df <- read.csv(file="C:\Users\mkarc\studia\Pakiety statystyczne\zajecia6.csv")
wd
getwd()
setwd('C:\Users\mkarc\studia\Pakiety statystyczne')
library("here")
install.packages("here")
library("here")
getwd()
setwd(here())
getwd()
df <- read.csv(file="zajecia6.csv")
here()
dirname(sys.frame(1)$ofile)
setwd( system.getCurrentDirectory() )
system.getCurrentDirectory()
library(sys)
dirname(sys.frame(1)$ofile)
system.getCurrentDirectory()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
project1 <- read.table("zajecia6.csv",
sep=",",
header=TRUE,
row.names = 1)
project1 <- read.table("C:\\Users\\mkarc\\studia\\Pakiety statystyczne\\zajecia6.csv",
sep=",",
header=TRUE,
row.names = 1)
View(project1)
library('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library('ggplot2')
install.packages("tidyverse")
help(elseif)
??elseif
help(ifelse)
library('ggplot2')
library('dplyr')
# Tidyverse
s
df <- read.table("C:\\Users\\mkarc\\studia\\Pakiety statystyczne\\zajecia6.csv",
sep=",",
header=TRUE,
row.names = 1)
ggplot(data=df, mapping=aes(x=sampleB, y=sampleH)) +
geom_point()
df <- df %>%
add_column(expr_limits= ifelse(.$sampleB > 13 & .$sampleH >13 ,"high","low"))
df <- df %>%
cbind(expr_limits= ifelse(.$sampleB > 13 & .$sampleH >13 ,"high","low"))
View(df)
help(ifelses)
df <- df %>%
cbind(expr_limits= ifelse(.$sampleB > 13 & .$sampleH >13 ,"high",ifelse(.$sampleB  < 6 & .$sampleH < 6,"low","normal")))
View(df)
View(df)
ggplot(data=df, mapping=aes(x=sampleB, y=sampleH,color = expr_limits)) +
geom_point()
library('tidyverse')
library('ggplot2')
library('tidyverse')
s
df <- read.table("C:\\Users\\mkarc\\studia\\Pakiety statystyczne\\zajecia6.csv",
sep=",",
header=TRUE,
row.names = 1)
ggplot(data=df, mapping=aes(x=sampleB, y=sampleH)) +
geom_point()
df <- df %>%
cbind(expr_limits= ifelse(.$sampleB > 13 & .$sampleH >13 ,"high",
ifelse(.$sampleB  < 6 & .$sampleH < 6,"low","normal")))
ggplot(data=df, mapping=aes(x=sampleB, y=sampleH,color = expr_limits)) +
geom_point()
p <- ggplot(data=df, mapping=aes(x=sampleB, y=sampleH,color = expr_limits)) +
geom_point()
p
p2 <- p + scale_color_manual(values=c("red","blue","grey"))
p2
projet_long <- melt(data=df)
library('tidyverse')
projet_long <- melt(data=df)
library(reshape2)
install.packages("reshape2")
library('reshape2')
projet_long <- melt(data=df)
View(projet_long)
ggplot(data=project_long,mapping = aes(x=variable,y=value))
project_long <- melt(data=df)
ggplot(data=project_long,mapping = aes(x=variable,y=value))
ggplot(data=project_long,mapping = aes(x=variable,y=value))+ geom_boxplot()
ggplot(data=project_long,mapping = aes(x=variable,y=value,color=expr_limits))+ geom_boxplot()
ggplot(data=project_long,mapping = aes(x=variable,y=value,color=expr_limits))+ geom_boxplot() + theme(axis.text.x = element_text(angle=90))
ggplot(data=project_long,mapping = aes(x=variable,y=value,color=expr_limits))+
geom_boxplot() + theme(axis.text.x = element_text(angle=90)) + ggtitle("Box plots")
ggplot(data=df, mapping = aes(x=expr_limits)) + geom_bar()
ggplot(data=df, mapping = aes(x=expr_limits)) + geom_bar() +
geom_hline(yintercept = 250)
bar2 <- bar + coord_flip()
bar2
bar <- ggplot(data=df, mapping = aes(x=expr_limits)) + geom_bar() +
geom_hline(yintercept = 250)
bar
bar2
bar2 <- bar + coord_flip()
bar2
ggplot(data=project_long, mapping = aes(x=values)) + geom_histogram()
ggplot(data=project_long, mapping = aes(x=value)) + geom_histogram()
ggplot(data=project_long, mapping = aes(x=value)) + geom_histogram(bins=50)
ggplot(data=project_long, mapping = aes(x=value,color=expr_limits)) + geom_histogram(bins=50)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) + geom_histogram(bins=50)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "doge")
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge")
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge")
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50) + facet_grid(~variable)
,position = "dodge"
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable) +
scale_fill_manual(values = rainbow(8))
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable) +
scale_fill_manual(values = rainbow(2))
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable) +
scale_fill_manual(values = rainbow(9))
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable) +
scale_fill_manual(values = rainbow(8))
hist <- ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable) +
scale_fill_manual(values = rainbow(8))
hist + xlim(6,13)
hist + xlim(6,13) + theme_minimal()
ggplot(data=project_long,mapping = aes(x=variable,y=value,color=expr_limits))+ geom_boxplot()
library('ggplot2')
library('ggplot2')
library('tidyverse')
library('reshape2')
df <- read.table("C:\\Users\\mkarc\\studia\\Pakiety statystyczne\\zajecia6.csv",
sep=",",
header=TRUE,
row.names = 1)
ggplot(data=df, mapping=aes(x=sampleB, y=sampleH)) +
geom_point()
df <- df %>%
cbind(expr_limits= ifelse(.$sampleB > 13 & .$sampleH >13 ,"high",
ifelse(.$sampleB  < 6 & .$sampleH < 6,"low","normal")))
p <- ggplot(data=df, mapping=aes(x=sampleB, y=sampleH,color = expr_limits)) +
geom_point()
p
p2 <- p + scale_color_manual(values=c("red","blue","grey"))
p2
project_long <- melt(data=df)
ggplot(data=project_long,mapping = aes(x=variable,y=value))+ geom_boxplot()
ggplot(data=project_long,mapping = aes(x=variable,y=value,color=expr_limits))+ geom_boxplot()
ggplot(data=project_long,mapping = aes(x=variable,y=value,color=expr_limits))+
geom_boxplot() + theme(axis.text.x = element_text(angle=90)) + ggtitle("Box plots")
bar <- ggplot(data=df, mapping = aes(x=expr_limits)) + geom_bar() +
geom_hline(yintercept = 250)
bar
bar2 <- bar + coord_flip()
bar2
ggplot(data=project_long, mapping = aes(x=value)) + geom_histogram()
ggplot(data=project_long, mapping = aes(x=value)) + geom_histogram(bins=50)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50)
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge")
ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable)
hist <- ggplot(data=project_long, mapping = aes(x=value,fill=variable)) +
geom_histogram(bins=50,position = "dodge") + facet_grid(~variable) +
scale_fill_manual(values = rainbow(8))
hist
hist + xlim(6,13)
hist + xlim(6,13) + theme_minimal()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library('tidyverse')
library('GGally')
# df <- read.csv(file = "C:/Users/Martyna/Studia/Pakiety statystyczne/raport1/chess_games.csv")
df <- read.csv(file = "chess_games.csv")
View(df)
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv(file = "chess_games.csv")
View(df)
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv(file = "chess_games.csv")
library("stringr")
library("ggplot2")
library(tidyr)
library(reshape2)
library(dplyr)
df <- na.omit(df)
df <- distinct(df)
#Dodawanie nowych kolumn ------------------------------
df <-  df %>% mutate(
white_win = ifelse(winner =='white',1,0),
black_win = ifelse(winner =='black',1,0),
draw = ifelse(winner =='draw',1,0)
)
df <- cbind(df,white_ranking_cat=(df$white_rating %/% 100 + 1) * 100)
df <- cbind(df,ranting_difrents=df$white_rating-df$black_rating)
df <- cbind(df,rating_diffrents_cat=(df$ranting_difrents %/% 100 + 1)* 100)
df <- cbind(df,turns_cat=(df$turns %/% 10 + 1)* 10)
#openingi
openings <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, ":") == TRUE){
location <- str_locate(opening_name, ":")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else if(str_detect(opening_name, "#") == TRUE){
location <- str_locate(opening_name, "#")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 2)
}
else if(str_detect(opening_name, "\\|") == TRUE){
location <- str_locate(opening_name, "\\|")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else{
openings[i] <- df[i, c("opening_name")]
}
}
df["openings_general"] <- openings
#Inne data framy do generowania wykresďż˝w
#wygrana_czas <- aggregate(df$wygrana_bialego,list(df$turns_cat),mean)
#wygrana_rating<- aggregate(df$wygrana_bialego,list(df$white_ranking_cat),mean)
#wygrana_roznica<- aggregate(df$wygrana_bialego,list(df$rating_diffrents_cat),mean)
openings_sicilian <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, "Sicilian Defense: ") == TRUE){
openings_sicilian[i] <- opening_name
}
else{
openings_sicilian[i] <- 0
}
}
print(unique(openings_sicilian)[2:6])
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
print(agg_to_analize_tbl_ordered)
games_count = sum(df$winner != "a")
print(games_count)
white_winner_count = sum(df$winner == "white")
print(white_winner_count)
black_winner_count = sum(df$winner == "black")
print(black_winner_count)
probab = function(dat){
all_count <- sum(dat$winner != "a")
white_wins_count <- sum(dat$winner == "white")
black_wins_count <- sum(dat$winner == "black")
white_prob <-white_wins_count/all_count
black_prob <-black_wins_count/all_count
draw_prob <- 1 - white_prob - black_prob
return(c(white_prob, black_prob, draw_prob))
}
top_openings <- agg_to_analize_tbl_ordered$openings_general
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
for(i in 1:10){
opening_df <- df[df["openings_general"] == top_openings[i],]
prob <- probab(opening_df)
probs_white[i] <- prob[1]
probs_black[i] <- prob[2]
probs_draw[i] <- prob[3]
}
probs_df <- data.frame(Otwarcie = top_openings, Biały_gracz = probs_white, Czarny_gracz = probs_black, Remis = probs_draw)
probs_df
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv(file = "chess_games.csv")
library("stringr")
library("ggplot2")
library(tidyr)
library(reshape2)
library(dplyr)
df <- na.omit(df)
df <- distinct(df)
#Dodawanie nowych kolumn ------------------------------
df <-  df %>% mutate(
white_win = ifelse(winner =='white',1,0),
black_win = ifelse(winner =='black',1,0),
draw = ifelse(winner =='draw',1,0)
)
df <- cbind(df,white_ranking_cat=(df$white_rating %/% 100 + 1) * 100)
df <- cbind(df,ranting_difrents=df$white_rating-df$black_rating)
df <- cbind(df,rating_diffrents_cat=(df$ranting_difrents %/% 100 + 1)* 100)
df <- cbind(df,turns_cat=(df$turns %/% 10 + 1)* 10)
#openingi
openings <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, ":") == TRUE){
location <- str_locate(opening_name, ":")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else if(str_detect(opening_name, "#") == TRUE){
location <- str_locate(opening_name, "#")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 2)
}
else if(str_detect(opening_name, "\\|") == TRUE){
location <- str_locate(opening_name, "\\|")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else{
openings[i] <- df[i, c("opening_name")]
}
}
df["openings_general"] <- openings
#Inne data framy do generowania wykresďż˝w
#wygrana_czas <- aggregate(df$wygrana_bialego,list(df$turns_cat),mean)
#wygrana_rating<- aggregate(df$wygrana_bialego,list(df$white_ranking_cat),mean)
#wygrana_roznica<- aggregate(df$wygrana_bialego,list(df$rating_diffrents_cat),mean)
openings_sicilian <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, "Sicilian Defense: ") == TRUE){
openings_sicilian[i] <- opening_name
}
else{
openings_sicilian[i] <- 0
}
}
print(unique(openings_sicilian)[2:6])
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
print(agg_to_analize_tbl_ordered)
games_count = sum(df$winner != "a")
print(games_count)
white_winner_count = sum(df$winner == "white")
print(white_winner_count)
black_winner_count = sum(df$winner == "black")
print(black_winner_count)
probab = function(dat){
all_count <- sum(dat$winner != "a")
white_wins_count <- sum(dat$winner == "white")
black_wins_count <- sum(dat$winner == "black")
white_prob <-white_wins_count/all_count
black_prob <-black_wins_count/all_count
draw_prob <- 1 - white_prob - black_prob
return(c(white_prob, black_prob, draw_prob))
}
top_openings <- agg_to_analize_tbl_ordered$openings_general
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
for(i in 1:10){
opening_df <- df[df["openings_general"] == top_openings[i],]
prob <- probab(opening_df)
probs_white[i] <- prob[1]
probs_black[i] <- prob[2]
probs_draw[i] <- prob[3]
}
probs_df <- data.frame(Otwarcie = top_openings, Biały_gracz = probs_white, Czarny_gracz = probs_black, Remis = probs_draw)
probs_df
```{r}
plot_white_ratig <- ggplot(data=df, mapping=aes(x=white_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking biaĹ‚ego') # rozkĹ‚ad  rankingu biaĹ‚ego
plot_black_rating <- ggplot(data=df, mapping=aes(x=black_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking czarnego') # rozkĹ‚ad  rankingu czarnego
grid.arrange(plot_white_ratig,plot_black_rating)
library('tidyverse')
library(reshape2)
library('boot')
library('gridExtra')
plot_white_ratig <- ggplot(data=df, mapping=aes(x=white_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking biaĹ‚ego') # rozkĹ‚ad  rankingu biaĹ‚ego
plot_black_rating <- ggplot(data=df, mapping=aes(x=black_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking czarnego') # rozkĹ‚ad  rankingu czarnego
grid.arrange(plot_white_ratig,plot_black_rating)
plot_black_rating <- ggplot(data=df, mapping=aes(x=black_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking czarnego', y="Liczebność") # rozkĹ‚ad  rankingu czarnego
plot_white_ratig <- ggplot(data=df, mapping=aes(x=white_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking białego', y= 'Liczebność') # rozkĹ‚ad  rankingu biaĹ‚ego
plot_black_rating <- ggplot(data=df, mapping=aes(x=black_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking czarnego', y="Liczebność") # rozkĹ‚ad  rankingu czarnego
grid.arrange(plot_white_ratig,plot_black_rating)
mean{df$black_rating}
library('tidyverse')
library(reshape2)
library('boot')
library('gridExtra')
library(e1071)
new_df = read.csv("winner_depend_ranting.csv")
plot_white <- ggplot(data=new_df,aes(x=values,y=white_win))  + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=white_win_bottom,ymax=white_win_top),color = "red",width=.05)+
labs(x = 'ranting Białego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana biaĹ‚ego")
plot_black <- ggplot(data=new_df,aes(x=values,y=black_win)) + geom_bar(stat='identity') + geom_errorbar(aes(ymin=black_win_bottom,ymax=black_win_top),color = "red",width=.05)+
labs(x = 'ranting Białeg‚ego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana czarnego")
plot_draw <- ggplot(data=new_df,aes(x=values,y=draw)) + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=draw_bottom,ymax=draw_top),color = "red",width=.05)+
labs(x = 'ranting Białego', y = 'Prawdopodobieństwo wygranej' , title="Remis")
grid.arrange(plot_white,plot_black,plot_draw)
new_df = read.csv("winner_depend_ranting.csv")
plot_white <- ggplot(data=new_df,aes(x=values,y=white_win))  + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=white_win_bottom,ymax=white_win_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana białego")
plot_black <- ggplot(data=new_df,aes(x=values,y=black_win)) + geom_bar(stat='identity') + geom_errorbar(aes(ymin=black_win_bottom,ymax=black_win_top),color = "red",width=.05)+
labs(x = 'Raking białeg‚ego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana czarnego")
plot_draw <- ggplot(data=new_df,aes(x=values,y=draw)) + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=draw_bottom,ymax=draw_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo wygranej' , title="Remis")
grid.arrange(plot_white,plot_black,plot_draw)
new_df = read.csv("winner_depend_ranting.csv")
plot_white <- ggplot(data=new_df,aes(x=values,y=white_win))  + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=white_win_bottom,ymax=white_win_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana białego")
plot_black <- ggplot(data=new_df,aes(x=values,y=black_win)) + geom_bar(stat='identity') + geom_errorbar(aes(ymin=black_win_bottom,ymax=black_win_top),color = "red",width=.05)+
labs(x = 'Raking białego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana czarnego")
plot_draw <- ggplot(data=new_df,aes(x=values,y=draw)) + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=draw_bottom,ymax=draw_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo wygranej' , title="Remis")
grid.arrange(plot_white,plot_black,plot_draw)
new_df = read.csv("winner_depend_ranting.csv")
plot_white <- ggplot(data=new_df,aes(x=values,y=white_win))  + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=white_win_bottom,ymax=white_win_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana białego")
plot_black <- ggplot(data=new_df,aes(x=values,y=black_win)) + geom_bar(stat='identity') + geom_errorbar(aes(ymin=black_win_bottom,ymax=black_win_top),color = "red",width=.05)+
labs(x = 'Raking białego', y = 'Prawdopodobieństwo wygranej' , title="Wygrana czarnego")
plot_draw <- ggplot(data=new_df,aes(x=values,y=draw)) + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=draw_bottom,ymax=draw_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo wygranej' , title="Remis")
grid.arrange(plot_white,plot_black,plot_draw)
plot_white <- ggplot(data=new_df,aes(x=values,y=white_win))  + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=white_win_bottom,ymax=white_win_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo' , title="Wygrana białego")
plot_black <- ggplot(data=new_df,aes(x=values,y=black_win)) + geom_bar(stat='identity') + geom_errorbar(aes(ymin=black_win_bottom,ymax=black_win_top),color = "red",width=.05)+
labs(x = 'Raking białego', y = 'Prawdopodobieństwo' , title="Wygrana czarnego")
plot_draw <- ggplot(data=new_df,aes(x=values,y=draw)) + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=draw_bottom,ymax=draw_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo' , title="Remis")
grid.arrange(plot_white,plot_black,plot_draw)
