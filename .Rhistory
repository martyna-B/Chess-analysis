scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis'))
ggplot(data=probs_df_long, aes(x=Otwarcie, y=win, fill=value)) + geom_bar(stat="identity", position="dodge", colour="black") +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Częstość różnych wyników") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
geom_hline(yintercept=0.4985, color="#d9c5b2", linetype="dashed", size=1) +
geom_hline(yintercept=0.4550, color="#34312d", linetype="dashed", size=1) +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#34312d", "#7e7f83"))
ggplot(data=top_df_long, aes(x=values, y=value, fill=win)) + geom_bar(stat="identity", position="dodge", colour="black") +
geom_errorbar(aes(ymin=bottom,
ymax=top), position = position_dodge(0.9)) +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Estymowane prawdopodobieństwo") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#34312d", "#7e7f83"))
ggplot(data=top_df_long, aes(x=values, y=value, fill=win)) + geom_bar(stat="identity", position="dodge", colour="black") +
geom_errorbar(aes(ymin=bottom,
ymax=top), position = position_dodge(0.9)) +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Estymowane prawdopodobieństwo") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#6c584c", "#7e7f83"))
ggplot(data=probs_df_long, aes(x=Otwarcie, y=win, fill=value)) + geom_bar(stat="identity", position="dodge", colour="black") +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Częstość różnych wyników") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
geom_hline(yintercept=0.4985, color="#d9c5b2", linetype="dashed", size=1) +
geom_hline(yintercept=0.4550, color="#6c584c", linetype="dashed", size=1) +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#6c584c", "#7e7f83"))
probs_df
df[df["openings_general"] == top_openings[1],]
names(df)
library('tidyverse')
library(reshape2)
library('boot')
library('gridExtra')
df
df <- na.omit(df)
df <- distinct(df)
df
df <-  df %>% mutate(
white_win = ifelse(winner =='white',1,0),
black_win = ifelse(winner =='black',1,0),
draw = ifelse(winner =='draw',1,0)
)
df
mean(df$white_win)
mean(df$black_win)
openings <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, ":") == TRUE){
location <- str_locate(opening_name, ":")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else if(str_detect(opening_name, "#") == TRUE){
location <- str_locate(opening_name, "#")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 2)
}
else if(str_detect(opening_name, "\\|") == TRUE){
location <- str_locate(opening_name, "\\|")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else{
openings[i] <- df[i, c("opening_name")]
}
}
df["openings_general"] <- openings
openings_df
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
top_df <- generate_data_openings(top_openings_df, top_openings_df$openings_general)
top_openings <- agg_to_analize_tbl_ordered$openings_general
top_openings_df <- df[df["openings_general"] == top_openings,]
top_openings_df
length(top_openings_df)
names(top_openings_df)
size(top_openings_df)
sum(top_openings_df)
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_rbl_ordered
agg_tbl_ordered
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
agg_to_analize_tbl_ordered
top_openings <- agg_to_analize_tbl_ordered$openings_general
top_openings
top_openings_df <- df[df["openings_general"] == top_openings,]
top_openings_df
agg_tbl_top <- top_openings_df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_top
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n())
agg_tbl
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
top_openings <- agg_to_analize_tbl_ordered$openings_general
top_openings_df <- df[df["openings_general"] == top_openings,]
agg_tbl_top <- top_openings_df %>% group_by(openings_general) %>%
summarise(total_count=n())
agg_tbl_top
top_openings
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n())
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
agg_to_analize_tbl_ordered
length(df)
probs_white
probab = function(dat){
all_count <- sum(dat$winner != "a")
white_wins_count <- sum(dat$winner == "white")
black_wins_count <- sum(dat$winner == "black")
white_prob <-white_wins_count/all_count
black_prob <-black_wins_count/all_count
draw_prob <- 1 - white_prob - black_prob
return(c(white_prob, black_prob, draw_prob, all_count))
}
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
coun_vec[i] <- vector()
for(i in 1:10){
opening_df <- df[df["openings_general"] == top_openings[i],]
prob <- probab(opening_df)
probs_white[i] <- prob[1]
probs_black[i] <- prob[2]
probs_draw[i] <- prob[3]
coun_vec[i] <- prob[4]
}
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
coun_vec[i] <- vector()
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
coun_vec[i] <- vector()
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
coun_vec <- vector()
for(i in 1:10){
opening_df <- df[df["openings_general"] == top_openings[i],]
prob <- probab(opening_df)
probs_white[i] <- prob[1]
probs_black[i] <- prob[2]
probs_draw[i] <- prob[3]
coun_vec[i] <- prob[4]
}
coun_vec
top_openings_df <- df[df["openings_general"] == "Sicilian Defense",]
top_openings_df
top_openings_df <- df[df["openings_general"] %in% top_openings,]
top_openings_df
top_openings
df
df$openings_general
df$openings_general == top_openings[1]
top_openings_df <- df[df["openings_general"] %in% top_openings[1],]
df$openings_general == top_openings[1]
top_openings_df
df["openings_general"]
top_openings_df <- df[df["openings_general"] == top_openings[1],]
df$openings_general == top_openings[1]
top_openings_df
top_openings_df <- df[df["openings_general"] == top_openings[1] | df["openings_general"] == top_openings[2],]
top_openings_df
top_openings_df <- filter(df, df$openings_general %in% top_openings)
top_openings_df
ggplot(data=top_df_long, aes(x=values, y=value, fill=win)) + geom_bar(stat="identity", position="dodge", colour="black") +
geom_errorbar(aes(ymin=bottom,
ymax=top), position = position_dodge(0.9)) +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Estymowane prawdopodobieństwo") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#6c584c", "#7e7f83"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv(file = "chess_games.csv")
library(reshape2)
library('boot')
library('gridExtra')
library(e1071)
library("stringr")
library("ggplot2")
library(tidyr)
library(dplyr)
#library('tidyverse')
df <- na.omit(df)
df <- distinct(df)
#Dodawanie nowych kolumn ------------------------------
df <-  df %>% mutate(
white_win = ifelse(winner =='white',1,0),
black_win = ifelse(winner =='black',1,0),
draw = ifelse(winner =='draw',1,0)
)
df <- cbind(df,white_ranking_cat=(df$white_rating %/% 100 + 1) * 100)
df <- cbind(df,ranting_difrents=df$white_rating-df$black_rating)
df <- cbind(df,rating_diffrents_cat=(df$ranting_difrents %/% 100 + 1)* 100)
df <- cbind(df,turns_cat=(df$turns %/% 10 + 1)* 10)
#openingi
openings <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, ":") == TRUE){
location <- str_locate(opening_name, ":")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else if(str_detect(opening_name, "#") == TRUE){
location <- str_locate(opening_name, "#")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 2)
}
else if(str_detect(opening_name, "\\|") == TRUE){
location <- str_locate(opening_name, "\\|")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else{
openings[i] <- df[i, c("opening_name")]
}
}
df["openings_general"] <- openings
#Inne data framy do generowania wykresďż˝w
#wygrana_czas <- aggregate(df$wygrana_bialego,list(df$turns_cat),mean)
#wygrana_rating<- aggregate(df$wygrana_bialego,list(df$white_ranking_cat),mean)
#wygrana_roznica<- aggregate(df$wygrana_bialego,list(df$rating_diffrents_cat),mean)
openings_sicilian <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, "Sicilian Defense: ") == TRUE){
openings_sicilian[i] <- opening_name
}
else{
openings_sicilian[i] <- 0
}
}
samplemean <- function(x, d) {
mean(x[d])
}
generate_data_openings <- function(df, column){
white_win <- numeric()
white_win_bottom <- numeric()
white_win_top <- numeric()
black_win <- numeric()
black_win_bottom <- numeric()
black_win_top <- numeric()
draw <- numeric()
draw_bottom <- numeric()
draw_top <- numeric()
values <- character()
for (value in sort(unique(column))) {
df2 <- df[which(column == value), ]
if (count(df2) > 10  ) {
values <- append(values,value)
white_ciboot <- boot.ci(boot(df2$white_win, samplemean, R = 1000), conf = 0.95, c("perc"))
white_win <- append(white_win, white_ciboot$t0)
white_win_bottom <- append(white_win_bottom, white_ciboot$perc[4])
white_win_top <- append(white_win_top, white_ciboot$perc[5])
black_ciboot <- boot.ci(boot(df2$black_win, samplemean, R = 1000), conf = 0.95, c("perc"))
black_win <- append(black_win, black_ciboot$t0)
black_win_bottom <- append(black_win_bottom, black_ciboot$perc[4])
black_win_top <- append(black_win_top, black_ciboot$perc[5])
draw_ciboot <- boot.ci(boot(df2$draw, samplemean, R = 1000), conf = 0.95, c("perc"))
draw <- append(draw, draw_ciboot$t0)
draw_bottom <- append(draw_bottom, draw_ciboot$perc[4])
draw_top <- append(draw_top, draw_ciboot$perc[5])
# print(draw_bottom)
}
}
new_df <- data.frame(values, white_win,white_win_top,white_win_bottom, black_win,black_win_top,black_win_bottom,draw,draw_bottom,draw_top)
return(new_df)
}
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
top_openings <- agg_to_analize_tbl_ordered$openings_general
top_openings_df <- filter(df, df$openings_general %in% top_openings)
top_df <- generate_data_openings(top_openings_df, top_openings_df$openings_general)
top_df_long <- gather(top_df, win, value, c(white_win, black_win, draw), factor_key=TRUE)
win_bottom <- vector()
win_top <- vector()
for(i in 1:30){
if(top_df_long[i, "win"] == "white_win"){
win_bottom[i] <- top_df_long[i, "white_win_bottom"]
win_top[i] <- top_df_long[i, "white_win_top"]
}
else if(top_df_long[i, "win"] == "black_win"){
win_bottom[i] <- top_df_long[i, "black_win_bottom"]
win_top[i] <- top_df_long[i, "black_win_top"]
}
else{
win_bottom[i] <- top_df_long[i, "draw_bottom"]
win_top[i] <- top_df_long[i, "draw_top"]
}
}
top_df_long["bottom"] <- win_bottom
top_df_long["top"] <- win_top
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv(file = "chess_games.csv")
library(reshape2)
library('boot')
library('gridExtra')
library(e1071)
library("stringr")
library("ggplot2")
library(tidyr)
library(dplyr)
#library('tidyverse')
df <- na.omit(df)
df <- distinct(df)
#Dodawanie nowych kolumn ------------------------------
df <-  df %>% mutate(
white_win = ifelse(winner =='white',1,0),
black_win = ifelse(winner =='black',1,0),
draw = ifelse(winner =='draw',1,0)
)
df <- cbind(df,white_ranking_cat=(df$white_rating %/% 100 + 1) * 100)
df <- cbind(df,ranting_difrents=df$white_rating-df$black_rating)
df <- cbind(df,rating_diffrents_cat=(df$ranting_difrents %/% 100 + 1)* 100)
df <- cbind(df,turns_cat=(df$turns %/% 10 + 1)* 10)
#openingi
openings <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, ":") == TRUE){
location <- str_locate(opening_name, ":")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else if(str_detect(opening_name, "#") == TRUE){
location <- str_locate(opening_name, "#")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 2)
}
else if(str_detect(opening_name, "\\|") == TRUE){
location <- str_locate(opening_name, "\\|")
openings[i] <- str_sub(opening_name, 1, location[1,1] - 1)
}
else{
openings[i] <- df[i, c("opening_name")]
}
}
df["openings_general"] <- openings
#Inne data framy do generowania wykresďż˝w
#wygrana_czas <- aggregate(df$wygrana_bialego,list(df$turns_cat),mean)
#wygrana_rating<- aggregate(df$wygrana_bialego,list(df$white_ranking_cat),mean)
#wygrana_roznica<- aggregate(df$wygrana_bialego,list(df$rating_diffrents_cat),mean)
openings_sicilian <- vector()
for(i in 1:nrow(df)){
opening_name <- df[i, c("opening_name")]
if(str_detect(opening_name, "Sicilian Defense: ") == TRUE){
openings_sicilian[i] <- opening_name
}
else{
openings_sicilian[i] <- 0
}
}
samplemean <- function(x, d) {
mean(x[d])
}
generate_data_openings <- function(df, column){
white_win <- numeric()
white_win_bottom <- numeric()
white_win_top <- numeric()
black_win <- numeric()
black_win_bottom <- numeric()
black_win_top <- numeric()
draw <- numeric()
draw_bottom <- numeric()
draw_top <- numeric()
values <- character()
for (value in sort(unique(column))) {
df2 <- df[which(column == value), ]
if (count(df2) > 10  ) {
values <- append(values,value)
white_ciboot <- boot.ci(boot(df2$white_win, samplemean, R = 1000), conf = 0.95, c("perc"))
white_win <- append(white_win, white_ciboot$t0)
white_win_bottom <- append(white_win_bottom, white_ciboot$perc[4])
white_win_top <- append(white_win_top, white_ciboot$perc[5])
black_ciboot <- boot.ci(boot(df2$black_win, samplemean, R = 1000), conf = 0.95, c("perc"))
black_win <- append(black_win, black_ciboot$t0)
black_win_bottom <- append(black_win_bottom, black_ciboot$perc[4])
black_win_top <- append(black_win_top, black_ciboot$perc[5])
draw_ciboot <- boot.ci(boot(df2$draw, samplemean, R = 1000), conf = 0.95, c("perc"))
draw <- append(draw, draw_ciboot$t0)
draw_bottom <- append(draw_bottom, draw_ciboot$perc[4])
draw_top <- append(draw_top, draw_ciboot$perc[5])
# print(draw_bottom)
}
}
new_df <- data.frame(values, white_win,white_win_top,white_win_bottom, black_win,black_win_top,black_win_bottom,draw,draw_bottom,draw_top)
return(new_df)
}
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
top_openings <- agg_to_analize_tbl_ordered$openings_general
top_openings_df <- filter(df, df$openings_general %in% top_openings)
top_df <- generate_data_openings(top_openings_df, top_openings_df$openings_general)
top_df_long <- gather(top_df, win, value, c(white_win, black_win, draw), factor_key=TRUE)
win_bottom <- vector()
win_top <- vector()
for(i in 1:30){
if(top_df_long[i, "win"] == "white_win"){
win_bottom[i] <- top_df_long[i, "white_win_bottom"]
win_top[i] <- top_df_long[i, "white_win_top"]
}
else if(top_df_long[i, "win"] == "black_win"){
win_bottom[i] <- top_df_long[i, "black_win_bottom"]
win_top[i] <- top_df_long[i, "black_win_top"]
}
else{
win_bottom[i] <- top_df_long[i, "draw_bottom"]
win_top[i] <- top_df_long[i, "draw_top"]
}
}
top_df_long["bottom"] <- win_bottom
top_df_long["top"] <- win_top
print(unique(openings_sicilian)[2:6])
agg_tbl <- df %>% group_by(openings_general) %>%
summarise(total_count=n(),
.groups = 'drop')
agg_tbl_ordered <-agg_tbl[order(agg_tbl$total_count, decreasing=TRUE),]
agg_to_analize_tbl_ordered <- agg_tbl_ordered[agg_tbl_ordered$total_count >= 500, ]
print(agg_to_analize_tbl_ordered)
games_count = sum(df$winner != "a")
print(games_count)
white_winner_count = sum(df$winner == "white")
print(white_winner_count)
black_winner_count = sum(df$winner == "black")
print(black_winner_count)
probab = function(dat){
all_count <- sum(dat$winner != "a")
white_wins_count <- sum(dat$winner == "white")
black_wins_count <- sum(dat$winner == "black")
white_prob <-white_wins_count/all_count
black_prob <-black_wins_count/all_count
draw_prob <- 1 - white_prob - black_prob
return(c(white_prob, black_prob, draw_prob))
}
top_openings <- agg_to_analize_tbl_ordered$openings_general
probs_white <- vector()
probs_black <- vector()
probs_draw <- vector()
for(i in 1:10){
opening_df <- df[df["openings_general"] == top_openings[i],]
prob <- probab(opening_df)
probs_white[i] <- prob[1]
probs_black[i] <- prob[2]
probs_draw[i] <- prob[3]
}
probs_df <- data.frame(Otwarcie = top_openings, Biały_gracz = probs_white, Czarny_gracz = probs_black, Remis = probs_draw)
probs_df_long <- gather(probs_df, value, win, c("Biały_gracz", "Czarny_gracz", "Remis"), factor_key=TRUE)
ggplot(data=probs_df_long, aes(x=Otwarcie, y=win, fill=value)) + geom_bar(stat="identity", position="dodge", colour="black") +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Częstość różnych wyników") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
geom_hline(yintercept=0.4985, color="#d9c5b2", linetype="dashed", size=1) +
geom_hline(yintercept=0.4550, color="#6c584c", linetype="dashed", size=1) +
geom_hline(yintercept=0.0475, color="#7e7f83", linetype="dashed", size=1) +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#6c584c", "#7e7f83"))
ggplot(data=top_df_long, aes(x=values, y=value, fill=win)) + geom_bar(stat="identity", position="dodge", colour="black") +
geom_errorbar(aes(ymin=bottom,
ymax=top), position = position_dodge(0.9)) +
theme(axis.text.x = element_text(angle=90), legend.title = element_blank()) +
scale_x_discrete(name ="") +
scale_y_continuous(name ="Estymowane prawdopodobieństwo") +
scale_fill_discrete(labels=c('Wygrana białego', 'Wygrana czarnego', 'Remis')) +
scale_fill_manual(values=c("#d9c5b2", "#6c584c", "#7e7f83"))
plot_white_ratig <- ggplot(data=df, mapping=aes(x=white_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking białego', y= 'Liczebność') # rozkĹ‚ad  rankingu biaĹ‚ego
plot_black_rating <- ggplot(data=df, mapping=aes(x=black_rating)) +  geom_histogram(bins=50)+
labs(x = 'Ranking czarnego', y="Liczebność") # rozkĹ‚ad  rankingu czarnego
grid.arrange(plot_white_ratig,plot_black_rating)
mean(df$white_rating)
mean(df$black_rating)
median(df$white_rating)
median(df$black_rating)
var(df$white_rating)
var(df$black_rating)
skewness(df$white_rating)
skewness(df$black_rating)
kurtosis(df$white_rating)
kurtosis(df$black_rating)
new_df = read.csv("winner_depend_ranting.csv")
plot_white <- ggplot(data=new_df,aes(x=values,y=white_win))  + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=white_win_bottom,ymax=white_win_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo' , title="Wygrana białego")
plot_black <- ggplot(data=new_df,aes(x=values,y=black_win)) + geom_bar(stat='identity') + geom_errorbar(aes(ymin=black_win_bottom,ymax=black_win_top),color = "red",width=.05)+
labs(x = 'Raking białego', y = 'Prawdopodobieństwo' , title="Wygrana czarnego")
plot_draw <- ggplot(data=new_df,aes(x=values,y=draw)) + geom_bar(stat='identity')+ geom_errorbar(aes(ymin=draw_bottom,ymax=draw_top),color = "red",width=.05)+
labs(x = 'Ranking białego', y = 'Prawdopodobieństwo' , title="Remis")
grid.arrange(plot_white,plot_black,plot_draw)
ggplot(data=df,aes(x=ranting_difrents)) + geom_histogram(bins=50) + labs(x= 'Różnica w rankingu', y='Liczebnść')
